import { z } from 'zod';
import { AggregateRoot } from '../base/aggregate-root.base';
import { AppointmentId } from '../value-objects/appointment-id.vo';
import { PatientId } from '../value-objects/patient-id.vo';
import { PsychologistId } from '../value-objects/psychologist-id.vo';
import { AppointmentStatus, AppointmentType, MeetingType } from '../entities/enums';
declare const AppointmentPropsSchema: z.ZodObject<{
    id: z.ZodAny;
    patientId: z.ZodAny;
    psychologistId: z.ZodAny;
    scheduledAt: z.ZodDate;
    duration: z.ZodDefault<z.ZodNumber>;
    appointmentType: z.ZodDefault<z.ZodEnum<typeof AppointmentType>>;
    status: z.ZodDefault<z.ZodEnum<typeof AppointmentStatus>>;
    meetingType: z.ZodDefault<z.ZodEnum<typeof MeetingType>>;
    meetingUrl: z.ZodOptional<z.ZodString>;
    meetingRoom: z.ZodOptional<z.ZodString>;
    reason: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
    privateNotes: z.ZodOptional<z.ZodString>;
    consultationFee: z.ZodOptional<z.ZodNumber>;
    isPaid: z.ZodDefault<z.ZodBoolean>;
    cancelledAt: z.ZodOptional<z.ZodDate>;
    cancelledBy: z.ZodOptional<z.ZodString>;
    cancellationReason: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodDefault<z.ZodDate>;
    updatedAt: z.ZodDefault<z.ZodDate>;
    confirmedAt: z.ZodOptional<z.ZodDate>;
    completedAt: z.ZodOptional<z.ZodDate>;
}, z.core.$strip>;
export type AppointmentProps = z.infer<typeof AppointmentPropsSchema>;
export declare class Appointment extends AggregateRoot<AppointmentProps> {
    private constructor();
    static create(props: Omit<AppointmentProps, 'id' | 'createdAt' | 'updatedAt'>): Appointment;
    static reconstitute(props: AppointmentProps, version: number): Appointment;
    private validate;
    get appointmentId(): AppointmentId;
    get patientId(): PatientId;
    get psychologistId(): PsychologistId;
    get scheduledAt(): Date;
    get status(): AppointmentStatus;
    get duration(): number;
    isScheduledWithin24Hours(): boolean;
    isPast(): boolean;
    canBeConfirmed(): boolean;
    canBeDeclined(): boolean;
    canBeCancelled(): boolean;
    canBeCompleted(): boolean;
    confirm(notes?: string): void;
    decline(notes?: string): void;
    cancel(cancelledBy: string, reason?: string): void;
    complete(notes?: string): void;
    toSnapshot(): AppointmentProps;
}
export {};
